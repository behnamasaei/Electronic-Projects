;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void init_shift_register();
;void send_shift_register();
;void send_pulse(uint8_t binaryNumber, bool sendZeroBit);
;void main(void)
; 0000 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0015 // Configure control pins as outputs
; 0000 0016 DDRC |= (1 << SH_CP) | (1 << DS) | (1 << ST_CP);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0017 
; 0000 0018 UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << U ...
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0019 UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (1 << TXEN) | ...
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001A UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) |  ...
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001B UBRRH = 0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001C UBRRL = 0x19;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001D 
; 0000 001E init_shift_register();
;PCODE: $0000001B VOL: 0
; 0000 001F send_shift_register();
;PCODE: $0000001C VOL: 0
; 0000 0020 
; 0000 0021 // Infinite loop
; 0000 0022 while (1)
;PCODE: $0000001D VOL: 0
; 0000 0023 {
; 0000 0024 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0025 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;void init_shift_register(void)
; 0000 0028 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0029 // Initialize pins to low state
; 0000 002A PORTC &= ~(1 << SH_CP);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002B PORTC &= ~(1 << DS);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002C PORTC &= ~(1 << ST_CP);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002D }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;void send_shift_register()
; 0000 0030 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0031 int unit = 0, tens = 0;
; 0000 0032 uint8_t unitNumber, tensNumber;
; 0000 0033 uint8_t numbers[] = {
; 0000 0034 //    gfedcba
; 0000 0035 0b0111111, // 0
; 0000 0036 0b0000110, // 1
; 0000 0037 0b1011011, // 2
; 0000 0038 0b1001111, // 3
; 0000 0039 0b1100110, // 4
; 0000 003A 0b1101101, // 5
; 0000 003B 0b1111101, // 6
; 0000 003C 0b0000111, // 7
; 0000 003D 0b1111111, // 8
; 0000 003E 0b1101111  // 9
; 0000 003F };
; 0000 0040 
; 0000 0041 while (1)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	unit -> R16,R17
;	tens -> R18,R19
;	unitNumber -> R21
;	tensNumber -> R20
;	numbers -> Y+6
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0042 {
; 0000 0043 
; 0000 0044 if (unit == 10)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0045 {
; 0000 0046 unit = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0047 tens++;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0048 }
; 0000 0049 
; 0000 004A unitNumber = numbers[unit]; // Binary number (7 bits)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B tensNumber = numbers[tens];
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004C 
; 0000 004D send_pulse(unitNumber, true);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004E delay_us(10);
;PCODE: $0000004B VOL: 0
; 0000 004F send_pulse(tensNumber, false);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0050 
; 0000 0051 // Latch data
; 0000 0052 PORTC |= (1 << ST_CP);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0053 delay_us(10);
;PCODE: $00000051 VOL: 0
; 0000 0054 PORTC &= ~(1 << ST_CP);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0055 delay_ms(200);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0056 
; 0000 0057 if (unit == 9 & tens == 9)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0058 {
; 0000 0059 tens = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005A unit = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005B }
; 0000 005C else
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005D {
; 0000 005E unit++;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005F }
;PCODE: $00000068 VOL: 0
; 0000 0060 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0061 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;void send_pulse(uint8_t binaryNumber, bool sendZeroBit)
; 0000 0064 {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0065 int j;
; 0000 0066 uint8_t bitChek;
; 0000 0067 for (j = 6; j >= 0; j--)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;	binaryNumber -> Y+5
;	sendZeroBit -> Y+4
;	j -> R16,R17
;	bitChek -> R19
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0068 {
; 0000 0069 // Extract the bit
; 0000 006A bitChek = (binaryNumber >> j) & 1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 006B 
; 0000 006C // Set or clear DS based on the bit value
; 0000 006D if (bitChek)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006E {
; 0000 006F PORTC |= (1 << DS);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0070 }
; 0000 0071 else
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0072 {
; 0000 0073 PORTC &= ~(1 << DS);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0074 }
;PCODE: $00000088 VOL: 0
; 0000 0075 
; 0000 0076 // Pulse SH_CP
; 0000 0077 PORTC |= (1 << SH_CP);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0078 delay_us(10);
;PCODE: $0000008B VOL: 0
; 0000 0079 PORTC &= ~(1 << SH_CP);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007A delay_us(10);
;PCODE: $0000008E VOL: 0
; 0000 007B }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007C 
; 0000 007D if (sendZeroBit)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007E {
; 0000 007F 
; 0000 0080 PORTC &= ~(1 << DS);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0081 
; 0000 0082 // Pulse SH_CP
; 0000 0083 PORTC |= (1 << SH_CP);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0084 delay_us(10);
;PCODE: $0000009B VOL: 0
; 0000 0085 PORTC &= ~(1 << SH_CP);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0086 delay_us(10);
;PCODE: $0000009E VOL: 0
; 0000 0087 }
; 0000 0088 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
