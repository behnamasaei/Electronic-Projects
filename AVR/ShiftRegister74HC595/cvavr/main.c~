#include <mega16a.h>
#include <io.h>
#include <delay.h>
#include <stdint.h>

// Define shift register control pins
#define SH_CP PORTC0 // Shift Clock
#define DS PORTC1    // Data
#define ST_CP PORTC3 // Latch Clock

void init_shift_register();
void send_shift_register(uint8_t number);

void main(void)
{
      // Configure control pins as outputs
      DDRC |= (1 << SH_CP) | (1 << DS) | (1 << ST_CP);

      init_shift_register();

      send_shift_register(1);

      // Infinite loop
      while (1)
      {
      }
}

void init_shift_register(void)
{
      // Initialize pins to low state
      PORTC &= ~(1 << SH_CP);
      PORTC &= ~(1 << DS);
      PORTC &= ~(1 << ST_CP);
}

void send_shift_register(uint8_t number)
{

      uint16_t numbers[] = {
          //    gfedcba
          0b0111111, // 0
          0b0000110, // 1
          0b1011011, // 2
          0b1001111, // 3
          0b1100110, // 4
          0b1101101, // 5
          0b1111101, // 6
          0b0000111, // 7
          0b1111111, // 8
          0b1101111  // 9
      };

      uint16_t binaryNumber = numbers[number]; // Binary number (7 bits)

      int i = 6;

      for (i = 6; i >= 0; i--)
      {                                             // Loop through each bit from MSB to LSB
            uint16_t bit = (binaryNumber >> i) & 1; // Extract the bit

            if (bit)
                  PORTC |= (1 << DS); // Set DS
            else
                  PORTC &= ~(1 << DS); // Clear DS

            // PORTC |= (bit << DS); // Set DS

            PORTC |= (1 << SH_CP); // Pulse SH_CP
            delay_us(10);
            PORTC &= ~(1 << SH_CP);
            delay_us(10);
      }

      // Latch data
      PORTC |= (1 << ST_CP); // Pulse ST_CP
      delay_us(10);
      PORTC &= ~(1 << ST_CP);
      delay_us(10);
}