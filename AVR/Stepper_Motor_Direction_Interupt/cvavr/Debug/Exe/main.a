;
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega16_bits.h>
;#include <stdio.h>
;#include <stdbool.h>
;#include <delay.h>
;
;#define PLAY_BUTTON 0b1
;#define SPEED_UP_BUTTON 0b10
;#define SPEED_DOWN_BUTTON 0b100
;#define DIR_LEFT_BUTTON 0b1000
;#define DIR_RIGHT_BUTTON 0b10000
;#define MAX_SPEED_CHANGE_COIL 100
;#define MIN_SPEED_CHANGE_COIL 2000
;
;bool RIGHT_DIR = true;
;bool POWER = true;
;int SPEED = 1000;
;
;unsigned char COIL_PIN_RIGHT_SUB_DEG = 0b0011;
;unsigned char COIL_PIN_LEFT_SUB_DEG = 0b0011;
;unsigned char COIL_PIN_MAIN_DEG = 0b0001;
;
;interrupt[EXT_INT0] void ext_int0_isr(void)
; 0000 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B       printf("SPEED Change Coil: %d\n\r", SPEED);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001C 
; 0000 001D       if (PINA & PLAY_BUTTON)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001E       {
; 0000 001F             POWER = !POWER;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020       }
; 0000 0021       else if (PINA & SPEED_UP_BUTTON)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0022       {
; 0000 0023             if ((SPEED - 100) > MAX_SPEED_CHANGE_COIL)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024                   SPEED -= 100;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0025       }
;PCODE: $0000002B VOL: 0
; 0000 0026       else if (PINA & SPEED_DOWN_BUTTON)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0027       {
; 0000 0028             if ((SPEED + 100) < MIN_SPEED_CHANGE_COIL)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0029                   SPEED += 100;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002A       }
;PCODE: $00000038 VOL: 0
; 0000 002B       else if (PINA & DIR_RIGHT_BUTTON)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002C       {
; 0000 002D             RIGHT_DIR = true;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002E             COIL_PIN_RIGHT_SUB_DEG = 0b0011;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002F             COIL_PIN_LEFT_SUB_DEG = 0b0011;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0030             COIL_PIN_MAIN_DEG = 0b0001;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0031       }
; 0000 0032       else if (PINA & DIR_LEFT_BUTTON)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0033       {
; 0000 0034             RIGHT_DIR = false;
;PCODE: $0000004B VOL: 0
; 0000 0035             COIL_PIN_RIGHT_SUB_DEG = 0b0011;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0036             COIL_PIN_LEFT_SUB_DEG = 0b1001;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0037             COIL_PIN_MAIN_DEG = 0b0001;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0038       }
; 0000 0039 }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;void run_stepper()
; 0000 003C {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D       if (POWER)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003E       {
; 0000 003F             if (RIGHT_DIR)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0040             {
; 0000 0041                   COIL_PIN_MAIN_DEG = (COIL_PIN_MAIN_DEG << 1) | ((COIL_PIN_MAIN_DEG >> 3) & 0x01);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0042                   COIL_PIN_MAIN_DEG &= 0x0F;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0043                   PORTC |= COIL_PIN_MAIN_DEG;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0044                   delay_ms(SPEED / 2);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0045                   PORTC &= 0xF0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0046 
; 0000 0047                   COIL_PIN_RIGHT_SUB_DEG = (COIL_PIN_RIGHT_SUB_DEG << 1) | ((COIL_PIN_RIGHT_SUB_DEG >> 3) & 0x01);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0048                   COIL_PIN_RIGHT_SUB_DEG &= 0x0F;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0049                   PORTC |= COIL_PIN_RIGHT_SUB_DEG;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 004A                   delay_ms(SPEED / 2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004B                   PORTC &= 0xF0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004C             }
; 0000 004D             else if (RIGHT_DIR == false)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004E             {
; 0000 004F 
; 0000 0050                   COIL_PIN_MAIN_DEG = (COIL_PIN_MAIN_DEG >> 1) | ((COIL_PIN_MAIN_DEG << 3) & 0b1000);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0051                   COIL_PIN_MAIN_DEG &= 0x0F;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0052                   PORTC |= COIL_PIN_MAIN_DEG;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0053                   delay_ms(SPEED / 2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0054                   PORTC &= 0xF0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0055 
; 0000 0056                   COIL_PIN_LEFT_SUB_DEG = (COIL_PIN_LEFT_SUB_DEG >> 1) | ((COIL_PIN_LEFT_SUB_DEG << 3) & 0b1000);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0057                   COIL_PIN_LEFT_SUB_DEG &= 0x0F;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0058                   PORTC |= COIL_PIN_LEFT_SUB_DEG;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0059                   delay_ms(SPEED / 2);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 005A                   PORTC &= 0xF0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 005B             }
; 0000 005C       }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 005D }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void main(void)
; 0000 0060 {
;PCODE: $000000C1 VOL: 0
; 0000 0061 
; 0000 0062       DDRC |= (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0063       PORTC &= ~((1 << PORTC3) | (1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0));
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0064 
; 0000 0065       // External Interrupt(s) initialization
; 0000 0066       // INT0: On
; 0000 0067       // INT0 Mode: Rising Edge
; 0000 0068       // INT1: Off
; 0000 0069       // INT2: Off
; 0000 006A       MCUCR |= (1 << ISC01) | (1 << ISC00);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 006B       GICR |= (1 << INT0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 006C       SREG |= (1 << 7);
;PCODE: $000000CE VOL: 0
; 0000 006D       GIFR |= (1 << INTF0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 006E 
; 0000 006F       // USART initialization
; 0000 0070       // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0071       // USART Receiver: Off
; 0000 0072       // USART Transmitter: On
; 0000 0073       // USART Mode: Asynchronous
; 0000 0074       // USART Baud Rate: 9600
; 0000 0075       UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << UPE) | (0 << U2X) | (0 << MPCM);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0076       UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (1 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 < ...
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0077       UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 < ...
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0078       UBRRH = 0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0079       UBRRL = 0x19;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 007A 
; 0000 007B // Global enable interrupts
; 0000 007C #asm("sei")
;PCODE: $000000DC VOL: 0
	sei
;PCODE: $000000DD VOL: 0
; 0000 007D 
; 0000 007E       while (1)
;PCODE: $000000DE VOL: 0
; 0000 007F       {
; 0000 0080             run_stepper();
;PCODE: $000000DF VOL: 0
; 0000 0081       }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0082 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
