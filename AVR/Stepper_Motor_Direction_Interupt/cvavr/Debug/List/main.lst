
AVRASM ver. 2.1.30  C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm Wed Jan 01 23:31:44 2025

C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\Stepper_Motor_Direction_Interupt\cvavr\Debug\List\main.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _RIGHT_DIR=R5
                 	.DEF _POWER=R4
                 	.DEF _SPEED=R6
                 	.DEF _SPEED_msb=R7
                 	.DEF _COIL_PIN_RIGHT_SUB_DEG=R9
                 	.DEF _COIL_PIN_LEFT_SUB_DEG=R8
                 	.DEF _COIL_PIN_MAIN_DEG=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0074 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0101
000034 03e8      	.DB  0x1,0x1,0xE8,0x3
000035 0303
000036 0100      	.DB  0x3,0x3,0x0,0x1
                 
                 _0x0:
000037 5053
000038 4545
000039 2044
00003a 6843      	.DB  0x53,0x50,0x45,0x45,0x44,0x20,0x43,0x68
00003b 6e61
00003c 6567
00003d 4320
00003e 696f      	.DB  0x61,0x6E,0x67,0x65,0x20,0x43,0x6F,0x69
00003f 3a6c
000040 2520
000041 0a64
000042 000d      	.DB  0x6C,0x3A,0x20,0x25,0x64,0xA,0xD,0x0
                 
                 __GLOBAL_INI_TBL:
000043 0008      	.DW  0x08
000044 0004      	.DW  0x04
000045 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bffb      	OUT  GICR,R31
00004c bfeb      	OUT  GICR,R30
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0114 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega16_bits.h>
                 ;#include <stdio.h>
                 ;#include <stdbool.h>
                 ;#include <delay.h>
                 ;
                 ;#define PLAY_BUTTON 0b1
                 ;#define SPEED_UP_BUTTON 0b10
                 ;#define SPEED_DOWN_BUTTON 0b100
                 ;#define DIR_LEFT_BUTTON 0b1000
                 ;#define DIR_RIGHT_BUTTON 0b10000
                 ;#define MAX_SPEED_CHANGE_COIL 100
                 ;#define MIN_SPEED_CHANGE_COIL 2000
                 ;
                 ;bool RIGHT_DIR = true;
                 ;bool POWER = true;
                 ;int SPEED = 1000;
                 ;
                 ;unsigned char COIL_PIN_RIGHT_SUB_DEG = 0b0011;
                 ;unsigned char COIL_PIN_LEFT_SUB_DEG = 0b0011;
                 ;unsigned char COIL_PIN_MAIN_DEG = 0b0001;
                 ;
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001A {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000074 920a      	ST   -Y,R0
000075 921a      	ST   -Y,R1
000076 92fa      	ST   -Y,R15
000077 936a      	ST   -Y,R22
000078 937a      	ST   -Y,R23
000079 938a      	ST   -Y,R24
00007a 939a      	ST   -Y,R25
00007b 93aa      	ST   -Y,R26
00007c 93ba      	ST   -Y,R27
00007d 93ea      	ST   -Y,R30
00007e 93fa      	ST   -Y,R31
00007f b7ef      	IN   R30,SREG
000080 93ea      	ST   -Y,R30
                 ; 0000 001B       printf("SPEED Change Coil: %d\n\r", SPEED);
                +
000081 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000082 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000083 93fa      	ST   -Y,R31
000084 93ea      	ST   -Y,R30
000085 01f3      	MOVW R30,R6
000086 940e 0302 	CALL __CWD1
000088 940e 033a 	CALL __PUTPARD1
00008a e084      	LDI  R24,4
00008b 940e 027a 	CALL _printf
00008d 9626      	ADIW R28,6
                 ; 0000 001C 
                 ; 0000 001D       if (PINA & PLAY_BUTTON)
00008e 9bc8      	SBIS 0x19,0
00008f c005      	RJMP _0x3
                 ; 0000 001E       {
                 ; 0000 001F             POWER = !POWER;
000090 2de4      	MOV  R30,R4
000091 940e 0307 	CALL __LNEGB1
000093 2e4e      	MOV  R4,R30
                 ; 0000 0020       }
                 ; 0000 0021       else if (PINA & SPEED_UP_BUTTON)
000094 c02c      	RJMP _0x4
                 _0x3:
000095 9bc9      	SBIS 0x19,1
000096 c00c      	RJMP _0x5
                 ; 0000 0022       {
                 ; 0000 0023             if ((SPEED - 100) > MAX_SPEED_CHANGE_COIL)
000097 01d3      	MOVW R26,R6
000098 56a4      	SUBI R26,LOW(100)
000099 40b0      	SBCI R27,HIGH(100)
00009a 36a5      	CPI  R26,LOW(0x65)
00009b e0e0      	LDI  R30,HIGH(0x65)
00009c 07be      	CPC  R27,R30
00009d f024      	BRLT _0x6
                 ; 0000 0024                   SPEED -= 100;
00009e e6e4      	LDI  R30,LOW(100)
00009f e0f0      	LDI  R31,HIGH(100)
                +
0000a0 1a6e     +SUB R6 , R30
0000a1 0a7f     +SBC R7 , R31
                 	__SUBWRR 6,7,30,31
                 ; 0000 0025       }
                 _0x6:
                 ; 0000 0026       else if (PINA & SPEED_DOWN_BUTTON)
0000a2 c01e      	RJMP _0x7
                 _0x5:
0000a3 9bca      	SBIS 0x19,2
0000a4 c00c      	RJMP _0x8
                 ; 0000 0027       {
                 ; 0000 0028             if ((SPEED + 100) < MIN_SPEED_CHANGE_COIL)
0000a5 01d3      	MOVW R26,R6
0000a6 59ac      	SUBI R26,LOW(-100)
0000a7 4fbf      	SBCI R27,HIGH(-100)
0000a8 3da0      	CPI  R26,LOW(0x7D0)
0000a9 e0e7      	LDI  R30,HIGH(0x7D0)
0000aa 07be      	CPC  R27,R30
0000ab f424      	BRGE _0x9
                 ; 0000 0029                   SPEED += 100;
0000ac 01f3      	MOVW R30,R6
0000ad 59ec      	SUBI R30,LOW(-100)
0000ae 4fff      	SBCI R31,HIGH(-100)
0000af 013f      	MOVW R6,R30
                 ; 0000 002A       }
                 _0x9:
                 ; 0000 002B       else if (PINA & DIR_RIGHT_BUTTON)
0000b0 c010      	RJMP _0xA
                 _0x8:
0000b1 9bcc      	SBIS 0x19,4
0000b2 c005      	RJMP _0xB
                 ; 0000 002C       {
                 ; 0000 002D             RIGHT_DIR = true;
0000b3 e0e1      	LDI  R30,LOW(1)
0000b4 2e5e      	MOV  R5,R30
                 ; 0000 002E             COIL_PIN_RIGHT_SUB_DEG = 0b0011;
0000b5 e0e3      	LDI  R30,LOW(3)
0000b6 2e9e      	MOV  R9,R30
                 ; 0000 002F             COIL_PIN_LEFT_SUB_DEG = 0b0011;
0000b7 c006      	RJMP _0x16
                 ; 0000 0030             COIL_PIN_MAIN_DEG = 0b0001;
                 ; 0000 0031       }
                 ; 0000 0032       else if (PINA & DIR_LEFT_BUTTON)
                 _0xB:
0000b8 9bcb      	SBIS 0x19,3
0000b9 c007      	RJMP _0xD
                 ; 0000 0033       {
                 ; 0000 0034             RIGHT_DIR = false;
0000ba 2455      	CLR  R5
                 ; 0000 0035             COIL_PIN_RIGHT_SUB_DEG = 0b0011;
0000bb e0e3      	LDI  R30,LOW(3)
0000bc 2e9e      	MOV  R9,R30
                 ; 0000 0036             COIL_PIN_LEFT_SUB_DEG = 0b1001;
0000bd e0e9      	LDI  R30,LOW(9)
                 _0x16:
0000be 2e8e      	MOV  R8,R30
                 ; 0000 0037             COIL_PIN_MAIN_DEG = 0b0001;
0000bf e0e1      	LDI  R30,LOW(1)
0000c0 2ebe      	MOV  R11,R30
                 ; 0000 0038       }
                 ; 0000 0039 }
                 _0xD:
                 _0xA:
                 _0x7:
                 _0x4:
0000c1 91e9      	LD   R30,Y+
0000c2 bfef      	OUT  SREG,R30
0000c3 91f9      	LD   R31,Y+
0000c4 91e9      	LD   R30,Y+
0000c5 91b9      	LD   R27,Y+
0000c6 91a9      	LD   R26,Y+
0000c7 9199      	LD   R25,Y+
0000c8 9189      	LD   R24,Y+
0000c9 9179      	LD   R23,Y+
0000ca 9169      	LD   R22,Y+
0000cb 90f9      	LD   R15,Y+
0000cc 9019      	LD   R1,Y+
0000cd 9009      	LD   R0,Y+
0000ce 9518      	RETI
                 ; .FEND
                 ;
                 ;void run_stepper()
                 ; 0000 003C {
                 _run_stepper:
                 ; .FSTART _run_stepper
                 ; 0000 003D       if (POWER)
0000cf 2044      	TST  R4
0000d0 f409      	BRNE PC+2
0000d1 c041      	RJMP _0xE
                 ; 0000 003E       {
                 ; 0000 003F             if (RIGHT_DIR)
0000d2 2055      	TST  R5
0000d3 f0c9      	BREQ _0xF
                 ; 0000 0040             {
                 ; 0000 0041                   COIL_PIN_MAIN_DEG = (COIL_PIN_MAIN_DEG << 1) | ((COIL_PIN_MAIN_DEG >> 3) & 0x01);
0000d4 2deb      	MOV  R30,R11
0000d5 0fee      	LSL  R30
0000d6 2fae      	MOV  R26,R30
0000d7 2deb      	MOV  R30,R11
0000d8 95e6      	LSR  R30
0000d9 95e6      	LSR  R30
0000da 95e6      	LSR  R30
0000db 70e1      	ANDI R30,LOW(0x1)
0000dc 940e 02b8 	CALL SUBOPT_0x0
                 ; 0000 0042                   COIL_PIN_MAIN_DEG &= 0x0F;
                 ; 0000 0043                   PORTC |= COIL_PIN_MAIN_DEG;
                 ; 0000 0044                   delay_ms(SPEED / 2);
                 ; 0000 0045                   PORTC &= 0xF0;
                 ; 0000 0046 
                 ; 0000 0047                   COIL_PIN_RIGHT_SUB_DEG = (COIL_PIN_RIGHT_SUB_DEG << 1) | ((COIL_PIN_RIGHT_SUB_DEG >> 3) & 0x01);
0000de 2de9      	MOV  R30,R9
0000df 0fee      	LSL  R30
0000e0 2fae      	MOV  R26,R30
0000e1 2de9      	MOV  R30,R9
0000e2 95e6      	LSR  R30
0000e3 95e6      	LSR  R30
0000e4 95e6      	LSR  R30
0000e5 70e1      	ANDI R30,LOW(0x1)
0000e6 2bea      	OR   R30,R26
0000e7 2e9e      	MOV  R9,R30
                 ; 0000 0048                   COIL_PIN_RIGHT_SUB_DEG &= 0x0F;
0000e8 e0ef      	LDI  R30,LOW(15)
0000e9 229e      	AND  R9,R30
                 ; 0000 0049                   PORTC |= COIL_PIN_RIGHT_SUB_DEG;
0000ea b3e5      	IN   R30,0x15
0000eb 29e9      	OR   R30,R9
0000ec c01a      	RJMP _0x17
                 ; 0000 004A                   delay_ms(SPEED / 2);
                 ; 0000 004B                   PORTC &= 0xF0;
                 ; 0000 004C             }
                 ; 0000 004D             else if (RIGHT_DIR == false)
                 _0xF:
0000ed 2055      	TST  R5
0000ee f521      	BRNE _0x11
                 ; 0000 004E             {
                 ; 0000 004F 
                 ; 0000 0050                   COIL_PIN_MAIN_DEG = (COIL_PIN_MAIN_DEG >> 1) | ((COIL_PIN_MAIN_DEG << 3) & 0b1000);
0000ef 2deb      	MOV  R30,R11
0000f0 95e6      	LSR  R30
0000f1 2fae      	MOV  R26,R30
0000f2 2deb      	MOV  R30,R11
0000f3 0fee      	LSL  R30
0000f4 0fee      	LSL  R30
0000f5 0fee      	LSL  R30
0000f6 70e8      	ANDI R30,LOW(0x8)
0000f7 940e 02b8 	CALL SUBOPT_0x0
                 ; 0000 0051                   COIL_PIN_MAIN_DEG &= 0x0F;
                 ; 0000 0052                   PORTC |= COIL_PIN_MAIN_DEG;
                 ; 0000 0053                   delay_ms(SPEED / 2);
                 ; 0000 0054                   PORTC &= 0xF0;
                 ; 0000 0055 
                 ; 0000 0056                   COIL_PIN_LEFT_SUB_DEG = (COIL_PIN_LEFT_SUB_DEG >> 1) | ((COIL_PIN_LEFT_SUB_DEG << 3) & 0b1000);
0000f9 2de8      	MOV  R30,R8
0000fa 95e6      	LSR  R30
0000fb 2fae      	MOV  R26,R30
0000fc 2de8      	MOV  R30,R8
0000fd 0fee      	LSL  R30
0000fe 0fee      	LSL  R30
0000ff 0fee      	LSL  R30
000100 70e8      	ANDI R30,LOW(0x8)
000101 2bea      	OR   R30,R26
000102 2e8e      	MOV  R8,R30
                 ; 0000 0057                   COIL_PIN_LEFT_SUB_DEG &= 0x0F;
000103 e0ef      	LDI  R30,LOW(15)
000104 228e      	AND  R8,R30
                 ; 0000 0058                   PORTC |= COIL_PIN_LEFT_SUB_DEG;
000105 b3e5      	IN   R30,0x15
000106 29e8      	OR   R30,R8
                 _0x17:
000107 bbe5      	OUT  0x15,R30
                 ; 0000 0059                   delay_ms(SPEED / 2);
000108 01d3      	MOVW R26,R6
000109 e0e2      	LDI  R30,LOW(2)
00010a e0f0      	LDI  R31,HIGH(2)
00010b 940e 031f 	CALL __DIVW21
00010d 01df      	MOVW R26,R30
00010e 940e 02f0 	CALL _delay_ms
                 ; 0000 005A                   PORTC &= 0xF0;
000110 b3e5      	IN   R30,0x15
000111 7fe0      	ANDI R30,LOW(0xF0)
000112 bbe5      	OUT  0x15,R30
                 ; 0000 005B             }
                 ; 0000 005C       }
                 _0x11:
                 ; 0000 005D }
                 _0xE:
000113 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0060 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0061 
                 ; 0000 0062       DDRC |= (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0);
000114 b3e4      	IN   R30,0x14
000115 60ef      	ORI  R30,LOW(0xF)
000116 bbe4      	OUT  0x14,R30
                 ; 0000 0063       PORTC &= ~((1 << PORTC3) | (1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0));
000117 b3e5      	IN   R30,0x15
000118 7fe0      	ANDI R30,LOW(0xF0)
000119 bbe5      	OUT  0x15,R30
                 ; 0000 0064 
                 ; 0000 0065       // External Interrupt(s) initialization
                 ; 0000 0066       // INT0: On
                 ; 0000 0067       // INT0 Mode: Rising Edge
                 ; 0000 0068       // INT1: Off
                 ; 0000 0069       // INT2: Off
                 ; 0000 006A       MCUCR |= (1 << ISC01) | (1 << ISC00);
00011a b7e5      	IN   R30,0x35
00011b 60e3      	ORI  R30,LOW(0x3)
00011c bfe5      	OUT  0x35,R30
                 ; 0000 006B       GICR |= (1 << INT0);
00011d b7eb      	IN   R30,0x3B
00011e 64e0      	ORI  R30,0x40
00011f bfeb      	OUT  0x3B,R30
                 ; 0000 006C       SREG |= (1 << 7);
000120 9478      	BSET 7
                 ; 0000 006D       GIFR |= (1 << INTF0);
000121 b7ea      	IN   R30,0x3A
000122 64e0      	ORI  R30,0x40
000123 bfea      	OUT  0x3A,R30
                 ; 0000 006E 
                 ; 0000 006F       // USART initialization
                 ; 0000 0070       // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0071       // USART Receiver: Off
                 ; 0000 0072       // USART Transmitter: On
                 ; 0000 0073       // USART Mode: Asynchronous
                 ; 0000 0074       // USART Baud Rate: 9600
                 ; 0000 0075       UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << UPE) | (0 << U2X) | (0 << MPCM);
000124 e0e0      	LDI  R30,LOW(0)
000125 b9eb      	OUT  0xB,R30
                 ; 0000 0076       UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (1 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 < ...
000126 e0e8      	LDI  R30,LOW(8)
000127 b9ea      	OUT  0xA,R30
                 ; 0000 0077       UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 < ...
000128 e8e6      	LDI  R30,LOW(134)
000129 bde0      	OUT  0x20,R30
                 ; 0000 0078       UBRRH = 0x00;
00012a e0e0      	LDI  R30,LOW(0)
00012b bde0      	OUT  0x20,R30
                 ; 0000 0079       UBRRL = 0x19;
00012c e1e9      	LDI  R30,LOW(25)
00012d b9e9      	OUT  0x9,R30
                 ; 0000 007A 
                 ; 0000 007B // Global enable interrupts
                 ; 0000 007C #asm("sei")
00012e 9478      	sei
                 ; 0000 007D 
                 ; 0000 007E       while (1)
                 _0x12:
                 ; 0000 007F       {
                 ; 0000 0080             run_stepper();
00012f df9f      	RCALL _run_stepper
                 ; 0000 0081       }
000130 cffe      	RJMP _0x12
                 ; 0000 0082 }
                 _0x15:
000131 cfff      	RJMP _0x15
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000132 93aa      	ST   -Y,R26
                 putchar0:
000133 9b5d           sbis usr,udre
000134 cffe           rjmp putchar0
000135 81e8           ld   r30,y
000136 b9ec           out  udr,r30
000137 9621      	ADIW R28,1
000138 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000139 93ba      	ST   -Y,R27
00013a 93aa      	ST   -Y,R26
00013b 81aa      	LDD  R26,Y+2
00013c dff5      	RCALL _putchar
00013d 81a8      	LD   R26,Y
00013e 81b9      	LDD  R27,Y+1
00013f 91ed      	LD   R30,X+
000140 91fd      	LD   R31,X+
000141 9631      	ADIW R30,1
000142 93fe      	ST   -X,R31
000143 93ee      	ST   -X,R30
000144 9623      	ADIW R28,3
000145 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000146 93ba      	ST   -Y,R27
000147 93aa      	ST   -Y,R26
000148 9726      	SBIW R28,6
000149 940e 033f 	CALL __SAVELOCR6
00014b e010      	LDI  R17,0
00014c 85ac      	LDD  R26,Y+12
00014d 85bd      	LDD  R27,Y+12+1
00014e e0e0      	LDI  R30,LOW(0)
00014f e0f0      	LDI  R31,HIGH(0)
000150 93ed      	ST   X+,R30
000151 93fc      	ST   X,R31
                 _0x2000016:
000152 89ea      	LDD  R30,Y+18
000153 89fb      	LDD  R31,Y+18+1
000154 9631      	ADIW R30,1
000155 8bea      	STD  Y+18,R30
000156 8bfb      	STD  Y+18+1,R31
000157 9731      	SBIW R30,1
000158 91e4      	LPM  R30,Z
000159 2f2e      	MOV  R18,R30
00015a 30e0      	CPI  R30,0
00015b f409      	BRNE PC+2
00015c c115      	RJMP _0x2000018
00015d 2fe1      	MOV  R30,R17
00015e 30e0      	CPI  R30,0
00015f f439      	BRNE _0x200001C
000160 3225      	CPI  R18,37
000161 f411      	BRNE _0x200001D
000162 e011      	LDI  R17,LOW(1)
000163 c002      	RJMP _0x200001E
                 _0x200001D:
000164 940e 02cb 	CALL SUBOPT_0x1
                 _0x200001E:
000166 c10a      	RJMP _0x200001B
                 _0x200001C:
000167 30e1      	CPI  R30,LOW(0x1)
000168 f4a9      	BRNE _0x200001F
000169 3225      	CPI  R18,37
00016a f419      	BRNE _0x2000020
00016b 940e 02cb 	CALL SUBOPT_0x1
00016d c102      	RJMP _0x20000CC
                 _0x2000020:
00016e e012      	LDI  R17,LOW(2)
00016f e040      	LDI  R20,LOW(0)
000170 e000      	LDI  R16,LOW(0)
000171 322d      	CPI  R18,45
000172 f411      	BRNE _0x2000021
000173 e001      	LDI  R16,LOW(1)
000174 c0fc      	RJMP _0x200001B
                 _0x2000021:
000175 322b      	CPI  R18,43
000176 f411      	BRNE _0x2000022
000177 e24b      	LDI  R20,LOW(43)
000178 c0f8      	RJMP _0x200001B
                 _0x2000022:
000179 3220      	CPI  R18,32
00017a f411      	BRNE _0x2000023
00017b e240      	LDI  R20,LOW(32)
00017c c0f4      	RJMP _0x200001B
                 _0x2000023:
00017d c002      	RJMP _0x2000024
                 _0x200001F:
00017e 30e2      	CPI  R30,LOW(0x2)
00017f f439      	BRNE _0x2000025
                 _0x2000024:
000180 e050      	LDI  R21,LOW(0)
000181 e013      	LDI  R17,LOW(3)
000182 3320      	CPI  R18,48
000183 f411      	BRNE _0x2000026
000184 6800      	ORI  R16,LOW(128)
000185 c0eb      	RJMP _0x200001B
                 _0x2000026:
000186 c003      	RJMP _0x2000027
                 _0x2000025:
000187 30e3      	CPI  R30,LOW(0x3)
000188 f009      	BREQ PC+2
000189 c0e7      	RJMP _0x200001B
                 _0x2000027:
00018a 3320      	CPI  R18,48
00018b f010      	BRLO _0x200002A
00018c 332a      	CPI  R18,58
00018d f008      	BRLO _0x200002B
                 _0x200002A:
00018e c007      	RJMP _0x2000029
                 _0x200002B:
00018f e0aa      	LDI  R26,LOW(10)
000190 9f5a      	MUL  R21,R26
000191 2d50      	MOV  R21,R0
000192 2fe2      	MOV  R30,R18
000193 53e0      	SUBI R30,LOW(48)
000194 0f5e      	ADD  R21,R30
000195 c0db      	RJMP _0x200001B
                 _0x2000029:
000196 2fe2      	MOV  R30,R18
000197 36e3      	CPI  R30,LOW(0x63)
000198 f449      	BRNE _0x200002F
000199 940e 02d2 	CALL SUBOPT_0x2
00019b 89e8      	LDD  R30,Y+16
00019c 89f9      	LDD  R31,Y+16+1
00019d 81a4      	LDD  R26,Z+4
00019e 93aa      	ST   -Y,R26
00019f 940e 02d8 	CALL SUBOPT_0x3
0001a1 c0ce      	RJMP _0x2000030
                 _0x200002F:
0001a2 37e3      	CPI  R30,LOW(0x73)
0001a3 f441      	BRNE _0x2000032
0001a4 940e 02d2 	CALL SUBOPT_0x2
0001a6 940e 02de 	CALL SUBOPT_0x4
0001a8 940e 029f 	CALL _strlen
0001aa 2f1e      	MOV  R17,R30
0001ab c00a      	RJMP _0x2000033
                 _0x2000032:
0001ac 37e0      	CPI  R30,LOW(0x70)
0001ad f461      	BRNE _0x2000035
0001ae 940e 02d2 	CALL SUBOPT_0x2
0001b0 940e 02de 	CALL SUBOPT_0x4
0001b2 940e 02ab 	CALL _strlenf
0001b4 2f1e      	MOV  R17,R30
0001b5 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001b6 6002      	ORI  R16,LOW(2)
0001b7 770f      	ANDI R16,LOW(127)
0001b8 e030      	LDI  R19,LOW(0)
0001b9 c034      	RJMP _0x2000036
                 _0x2000035:
0001ba 36e4      	CPI  R30,LOW(0x64)
0001bb f011      	BREQ _0x2000039
0001bc 36e9      	CPI  R30,LOW(0x69)
0001bd f411      	BRNE _0x200003A
                 _0x2000039:
0001be 6004      	ORI  R16,LOW(4)
0001bf c002      	RJMP _0x200003B
                 _0x200003A:
0001c0 37e5      	CPI  R30,LOW(0x75)
0001c1 f431      	BRNE _0x200003C
                 _0x200003B:
0001c2 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001c3 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001c4 83ee      	STD  Y+6,R30
0001c5 83ff      	STD  Y+6+1,R31
0001c6 e015      	LDI  R17,LOW(5)
0001c7 c00c      	RJMP _0x200003D
                 _0x200003C:
0001c8 35e8      	CPI  R30,LOW(0x58)
0001c9 f411      	BRNE _0x200003F
0001ca 6008      	ORI  R16,LOW(8)
0001cb c003      	RJMP _0x2000040
                 _0x200003F:
0001cc 37e8      	CPI  R30,LOW(0x78)
0001cd f009      	BREQ PC+2
0001ce c0a1      	RJMP _0x2000071
                 _0x2000040:
0001cf e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001d0 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001d1 83ee      	STD  Y+6,R30
0001d2 83ff      	STD  Y+6+1,R31
0001d3 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001d4 ff02      	SBRS R16,2
0001d5 c014      	RJMP _0x2000042
0001d6 940e 02d2 	CALL SUBOPT_0x2
0001d8 940e 02e8 	CALL SUBOPT_0x5
0001da 85ab      	LDD  R26,Y+11
0001db 23aa      	TST  R26
0001dc f43a      	BRPL _0x2000043
0001dd 85ea      	LDD  R30,Y+10
0001de 85fb      	LDD  R31,Y+10+1
0001df 940e 02fe 	CALL __ANEGW1
0001e1 87ea      	STD  Y+10,R30
0001e2 87fb      	STD  Y+10+1,R31
0001e3 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001e4 3040      	CPI  R20,0
0001e5 f011      	BREQ _0x2000044
0001e6 5f1f      	SUBI R17,-LOW(1)
0001e7 c001      	RJMP _0x2000045
                 _0x2000044:
0001e8 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001e9 c004      	RJMP _0x2000046
                 _0x2000042:
0001ea 940e 02d2 	CALL SUBOPT_0x2
0001ec 940e 02e8 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001ee fd00      	SBRC R16,0
0001ef c011      	RJMP _0x2000047
                 _0x2000048:
0001f0 1715      	CP   R17,R21
0001f1 f478      	BRSH _0x200004A
0001f2 ff07      	SBRS R16,7
0001f3 c008      	RJMP _0x200004B
0001f4 ff02      	SBRS R16,2
0001f5 c004      	RJMP _0x200004C
0001f6 7f0b      	ANDI R16,LOW(251)
0001f7 2f24      	MOV  R18,R20
0001f8 5011      	SUBI R17,LOW(1)
0001f9 c001      	RJMP _0x200004D
                 _0x200004C:
0001fa e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001fb c001      	RJMP _0x200004E
                 _0x200004B:
0001fc e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001fd 940e 02cb 	CALL SUBOPT_0x1
0001ff 5051      	SUBI R21,LOW(1)
000200 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000201 2f31      	MOV  R19,R17
000202 ff01      	SBRS R16,1
000203 c017      	RJMP _0x200004F
                 _0x2000050:
000204 3030      	CPI  R19,0
000205 f0a1      	BREQ _0x2000052
000206 ff03      	SBRS R16,3
000207 c006      	RJMP _0x2000053
000208 81ee      	LDD  R30,Y+6
000209 81ff      	LDD  R31,Y+6+1
00020a 9125      	LPM  R18,Z+
00020b 83ee      	STD  Y+6,R30
00020c 83ff      	STD  Y+6+1,R31
00020d c005      	RJMP _0x2000054
                 _0x2000053:
00020e 81ae      	LDD  R26,Y+6
00020f 81bf      	LDD  R27,Y+6+1
000210 912d      	LD   R18,X+
000211 83ae      	STD  Y+6,R26
000212 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000213 940e 02cb 	CALL SUBOPT_0x1
000215 3050      	CPI  R21,0
000216 f009      	BREQ _0x2000055
000217 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000218 5031      	SUBI R19,LOW(1)
000219 cfea      	RJMP _0x2000050
                 _0x2000052:
00021a c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00021b e320      	LDI  R18,LOW(48)
00021c 81ee      	LDD  R30,Y+6
00021d 81ff      	LDD  R31,Y+6+1
00021e 940e 0336 	CALL __GETW1PF
000220 87e8      	STD  Y+8,R30
000221 87f9      	STD  Y+8+1,R31
000222 81ee      	LDD  R30,Y+6
000223 81ff      	LDD  R31,Y+6+1
000224 9632      	ADIW R30,2
000225 83ee      	STD  Y+6,R30
000226 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000227 85e8      	LDD  R30,Y+8
000228 85f9      	LDD  R31,Y+8+1
000229 85aa      	LDD  R26,Y+10
00022a 85bb      	LDD  R27,Y+10+1
00022b 17ae      	CP   R26,R30
00022c 07bf      	CPC  R27,R31
00022d f050      	BRLO _0x200005C
00022e 5f2f      	SUBI R18,-LOW(1)
00022f 85a8      	LDD  R26,Y+8
000230 85b9      	LDD  R27,Y+8+1
000231 85ea      	LDD  R30,Y+10
000232 85fb      	LDD  R31,Y+10+1
000233 1bea      	SUB  R30,R26
000234 0bfb      	SBC  R31,R27
000235 87ea      	STD  Y+10,R30
000236 87fb      	STD  Y+10+1,R31
000237 cfef      	RJMP _0x200005A
                 _0x200005C:
000238 332a      	CPI  R18,58
000239 f028      	BRLO _0x200005D
00023a ff03      	SBRS R16,3
00023b c002      	RJMP _0x200005E
00023c 5f29      	SUBI R18,-LOW(7)
00023d c001      	RJMP _0x200005F
                 _0x200005E:
00023e 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00023f fd04      	SBRC R16,4
000240 c01a      	RJMP _0x2000061
000241 3321      	CPI  R18,49
000242 f420      	BRSH _0x2000063
000243 85a8      	LDD  R26,Y+8
000244 85b9      	LDD  R27,Y+8+1
000245 9711      	SBIW R26,1
000246 f409      	BRNE _0x2000062
                 _0x2000063:
000247 c009      	RJMP _0x20000CD
                 _0x2000062:
000248 1753      	CP   R21,R19
000249 f010      	BRLO _0x2000067
00024a ff00      	SBRS R16,0
00024b c001      	RJMP _0x2000068
                 _0x2000067:
00024c c013      	RJMP _0x2000066
                 _0x2000068:
00024d e220      	LDI  R18,LOW(32)
00024e ff07      	SBRS R16,7
00024f c00b      	RJMP _0x2000069
000250 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000251 6100      	ORI  R16,LOW(16)
000252 ff02      	SBRS R16,2
000253 c007      	RJMP _0x200006A
000254 7f0b      	ANDI R16,LOW(251)
000255 934a      	ST   -Y,R20
000256 940e 02d8 	CALL SUBOPT_0x3
000258 3050      	CPI  R21,0
000259 f009      	BREQ _0x200006B
00025a 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00025b 940e 02cb 	CALL SUBOPT_0x1
00025d 3050      	CPI  R21,0
00025e f009      	BREQ _0x200006C
00025f 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000260 5031      	SUBI R19,LOW(1)
000261 85a8      	LDD  R26,Y+8
000262 85b9      	LDD  R27,Y+8+1
000263 9712      	SBIW R26,2
000264 f008      	BRLO _0x2000059
000265 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000266 ff00      	SBRS R16,0
000267 c008      	RJMP _0x200006D
                 _0x200006E:
000268 3050      	CPI  R21,0
000269 f031      	BREQ _0x2000070
00026a 5051      	SUBI R21,LOW(1)
00026b e2e0      	LDI  R30,LOW(32)
00026c 93ea      	ST   -Y,R30
00026d 940e 02d8 	CALL SUBOPT_0x3
00026f cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000270 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000271 cee0      	RJMP _0x2000016
                 _0x2000018:
000272 85ac      	LDD  R26,Y+12
000273 85bd      	LDD  R27,Y+12+1
000274 940e 0332 	CALL __GETW1P
000276 940e 0346 	CALL __LOADLOCR6
000278 9664      	ADIW R28,20
000279 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00027a 92ff      	PUSH R15
00027b 2ef8      	MOV  R15,R24
00027c 9726      	SBIW R28,6
00027d 931a      	ST   -Y,R17
00027e 930a      	ST   -Y,R16
00027f 01de      	MOVW R26,R28
000280 9614      	ADIW R26,4
000281 940e 02fa 	CALL __ADDW2R15
000283 018d      	MOVW R16,R26
000284 e0e0      	LDI  R30,LOW(0)
000285 83ec      	STD  Y+4,R30
000286 83ed      	STD  Y+4+1,R30
000287 83ee      	STD  Y+6,R30
000288 83ef      	STD  Y+6+1,R30
000289 01de      	MOVW R26,R28
00028a 9618      	ADIW R26,8
00028b 940e 02fa 	CALL __ADDW2R15
00028d 940e 0332 	CALL __GETW1P
00028f 93fa      	ST   -Y,R31
000290 93ea      	ST   -Y,R30
000291 931a      	ST   -Y,R17
000292 930a      	ST   -Y,R16
000293 e3e9      	LDI  R30,LOW(_put_usart_G100)
000294 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000295 93fa      	ST   -Y,R31
000296 93ea      	ST   -Y,R30
000297 01de      	MOVW R26,R28
000298 9618      	ADIW R26,8
000299 deac      	RCALL __print_G100
00029a 8119      	LDD  R17,Y+1
00029b 8108      	LDD  R16,Y+0
00029c 9628      	ADIW R28,8
00029d 90ff      	POP  R15
00029e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00029f 93ba      	ST   -Y,R27
0002a0 93aa      	ST   -Y,R26
0002a1 91a9          ld   r26,y+
0002a2 91b9          ld   r27,y+
0002a3 27ee          clr  r30
0002a4 27ff          clr  r31
                 strlen0:
0002a5 916d          ld   r22,x+
0002a6 2366          tst  r22
0002a7 f011          breq strlen1
0002a8 9631          adiw r30,1
0002a9 cffb          rjmp strlen0
                 strlen1:
0002aa 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002ab 93ba      	ST   -Y,R27
0002ac 93aa      	ST   -Y,R26
0002ad 27aa          clr  r26
0002ae 27bb          clr  r27
0002af 91e9          ld   r30,y+
0002b0 91f9          ld   r31,y+
                 strlenf0:
0002b1 9005      	lpm  r0,z+
0002b2 2000          tst  r0
0002b3 f011          breq strlenf1
0002b4 9611          adiw r26,1
0002b5 cffb          rjmp strlenf0
                 strlenf1:
0002b6 01fd          movw r30,r26
0002b7 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0002b8 2bea      	OR   R30,R26
0002b9 2ebe      	MOV  R11,R30
0002ba e0ef      	LDI  R30,LOW(15)
0002bb 22be      	AND  R11,R30
0002bc b3e5      	IN   R30,0x15
0002bd 29eb      	OR   R30,R11
0002be bbe5      	OUT  0x15,R30
0002bf 01d3      	MOVW R26,R6
0002c0 e0e2      	LDI  R30,LOW(2)
0002c1 e0f0      	LDI  R31,HIGH(2)
0002c2 940e 031f 	CALL __DIVW21
0002c4 01df      	MOVW R26,R30
0002c5 940e 02f0 	CALL _delay_ms
0002c7 b3e5      	IN   R30,0x15
0002c8 7fe0      	ANDI R30,LOW(0xF0)
0002c9 bbe5      	OUT  0x15,R30
0002ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
0002cb 932a      	ST   -Y,R18
0002cc 85ad      	LDD  R26,Y+13
0002cd 85be      	LDD  R27,Y+13+1
0002ce 85ef      	LDD  R30,Y+15
0002cf 89f8      	LDD  R31,Y+15+1
0002d0 9509      	ICALL
0002d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0002d2 89e8      	LDD  R30,Y+16
0002d3 89f9      	LDD  R31,Y+16+1
0002d4 9734      	SBIW R30,4
0002d5 8be8      	STD  Y+16,R30
0002d6 8bf9      	STD  Y+16+1,R31
0002d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0002d8 85ad      	LDD  R26,Y+13
0002d9 85be      	LDD  R27,Y+13+1
0002da 85ef      	LDD  R30,Y+15
0002db 89f8      	LDD  R31,Y+15+1
0002dc 9509      	ICALL
0002dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0002de 89a8      	LDD  R26,Y+16
0002df 89b9      	LDD  R27,Y+16+1
0002e0 9614      	ADIW R26,4
0002e1 940e 0332 	CALL __GETW1P
0002e3 83ee      	STD  Y+6,R30
0002e4 83ff      	STD  Y+6+1,R31
0002e5 81ae      	LDD  R26,Y+6
0002e6 81bf      	LDD  R27,Y+6+1
0002e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0002e8 89a8      	LDD  R26,Y+16
0002e9 89b9      	LDD  R27,Y+16+1
0002ea 9614      	ADIW R26,4
0002eb 940e 0332 	CALL __GETW1P
0002ed 87ea      	STD  Y+10,R30
0002ee 87fb      	STD  Y+10+1,R31
0002ef 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002f0 9610      	adiw r26,0
0002f1 f039      	breq __delay_ms1
                 __delay_ms0:
0002f2 95a8      	wdr
                +
0002f3 ee88     +LDI R24 , LOW ( 0x3E8 )
0002f4 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
0002f5 9701     +SBIW R24 , 1
0002f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
0002f7 9711      	sbiw r26,1
0002f8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002f9 9508      	ret
                 
                 __ADDW2R15:
0002fa 2400      	CLR  R0
0002fb 0daf      	ADD  R26,R15
0002fc 1db0      	ADC  R27,R0
0002fd 9508      	RET
                 
                 __ANEGW1:
0002fe 95f1      	NEG  R31
0002ff 95e1      	NEG  R30
000300 40f0      	SBCI R31,0
000301 9508      	RET
                 
                 __CWD1:
000302 2f6f      	MOV  R22,R31
000303 0f66      	ADD  R22,R22
000304 0b66      	SBC  R22,R22
000305 2f76      	MOV  R23,R22
000306 9508      	RET
                 
                 __LNEGB1:
000307 23ee      	TST  R30
000308 e0e1      	LDI  R30,1
000309 f009      	BREQ __LNEGB1F
00030a 27ee      	CLR  R30
                 __LNEGB1F:
00030b 9508      	RET
                 
                 __DIVW21U:
00030c 2400      	CLR  R0
00030d 2411      	CLR  R1
00030e e190      	LDI  R25,16
                 __DIVW21U1:
00030f 0faa      	LSL  R26
000310 1fbb      	ROL  R27
000311 1c00      	ROL  R0
000312 1c11      	ROL  R1
000313 1a0e      	SUB  R0,R30
000314 0a1f      	SBC  R1,R31
000315 f418      	BRCC __DIVW21U2
000316 0e0e      	ADD  R0,R30
000317 1e1f      	ADC  R1,R31
000318 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000319 60a1      	SBR  R26,1
                 __DIVW21U3:
00031a 959a      	DEC  R25
00031b f799      	BRNE __DIVW21U1
00031c 01fd      	MOVW R30,R26
00031d 01d0      	MOVW R26,R0
00031e 9508      	RET
                 
                 __DIVW21:
00031f d004      	RCALL __CHKSIGNW
000320 dfeb      	RCALL __DIVW21U
000321 f40e      	BRTC __DIVW211
000322 dfdb      	RCALL __ANEGW1
                 __DIVW211:
000323 9508      	RET
                 
                 __CHKSIGNW:
000324 94e8      	CLT
000325 fff7      	SBRS R31,7
000326 c002      	RJMP __CHKSW1
000327 dfd6      	RCALL __ANEGW1
000328 9468      	SET
                 __CHKSW1:
000329 ffb7      	SBRS R27,7
00032a c006      	RJMP __CHKSW2
00032b 95a0      	COM  R26
00032c 95b0      	COM  R27
00032d 9611      	ADIW R26,1
00032e f800      	BLD  R0,0
00032f 9403      	INC  R0
000330 fa00      	BST  R0,0
                 __CHKSW2:
000331 9508      	RET
                 
                 __GETW1P:
000332 91ed      	LD   R30,X+
000333 91fc      	LD   R31,X
000334 9711      	SBIW R26,1
000335 9508      	RET
                 
                 __GETW1PF:
000336 9005      	LPM  R0,Z+
000337 91f4      	LPM  R31,Z
000338 2de0      	MOV  R30,R0
000339 9508      	RET
                 
                 __PUTPARD1:
00033a 937a      	ST   -Y,R23
00033b 936a      	ST   -Y,R22
00033c 93fa      	ST   -Y,R31
00033d 93ea      	ST   -Y,R30
00033e 9508      	RET
                 
                 __SAVELOCR6:
00033f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000340 934a      	ST   -Y,R20
                 __SAVELOCR4:
000341 933a      	ST   -Y,R19
                 __SAVELOCR3:
000342 932a      	ST   -Y,R18
                 __SAVELOCR2:
000343 931a      	ST   -Y,R17
000344 930a      	ST   -Y,R16
000345 9508      	RET
                 
                 __LOADLOCR6:
000346 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000347 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000348 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000349 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00034a 8119      	LDD  R17,Y+1
00034b 8108      	LD   R16,Y
00034c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  21 r1 :   7 r2 :   0 r3 :   0 r4 :   3 r5 :   4 r6 :   8 r7 :   1 
r8 :   6 r9 :   7 r10:   0 r11:   8 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  30 r17:  19 r18:  27 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  13 r25:   7 r26:  75 r27:  34 r28:  11 r29:   1 r30: 214 r31:  56 
x  :  13 y  : 148 z  :  13 
Registers used: 29 out of 35 (82.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  17 and   :   3 andi  :  11 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   0 brne  :  25 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   1 call  :  39 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   3 cpi   :  31 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  11 inc   :   1 jmp   :  22 ld    :  25 ldd   :  57 ldi   :  71 
lds   :   0 lpm   :  14 lsl   :   9 lsr   :   8 mov   :  35 movw  :  19 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   6 
ori   :  10 out   :  22 pop   :   1 push  :   1 rcall :   7 ret   :  26 
reti  :   1 rjmp  :  67 rol   :   3 ror   :   0 sbc   :   4 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   6 sbiw  :  12 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  52 std   :  28 sts   :   0 sub   :   3 subi  :  16 swap  :   0 
tst   :   7 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00069a   1632     58   1690   16384  10.3%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
