;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;PCODE: $0000000D VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $0000000E VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $0000000F VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000010 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000011 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000012 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000013 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000014 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000015 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000016 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000017 VOL: 0
	#endif
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;#include <stdlib.h>
;#include <stdint.h>
;
;// Define pins for MAX7219
;#define MAX7219_DIN PORTB .5 // Data in
;#define MAX7219_CS PORTB .4  // Chip select
;#define MAX7219_CLK PORTB .3 // Clock
;
;// MAX7219 registers
;#define DECODE_MODE 0x09
;#define INTENSITY 0x0A
;#define SCAN_LIMIT 0x0B
;#define SHUTDOWN 0x0C
;#define DISPLAY_TEST 0x0F
;
;// Example smiley face pattern
;unsigned char IMAGES[][8] = {
;    {0b00010000,
;     0b00110000,
;     0b00010000,
;     0b00010000,
;     0b00010000,
;     0b00010000,
;     0b00010000,
;     0b00111000},
;    {0b00111000,
;     0b01000100,
;     0b00000100,
;     0b00000100,
;     0b00001000,
;     0b00010000,
;     0b00100000,
;     0b01111100},
;    {0b00111000,
;     0b01000100,
;     0b00000100,
;     0b00011000,
;     0b00000100,
;     0b00000100,
;     0b01000100,
;     0b00111000},
;    {0b00000100,
;     0b00001100,
;     0b00010100,
;     0b00100100,
;     0b01000100,
;     0b01111100,
;     0b00000100,
;     0b00000100},
;    {0b01111100,
;     0b01000000,
;     0b01000000,
;     0b01111000,
;     0b00000100,
;     0b00000100,
;     0b01000100,
;     0b00111000},
;    {0b00111000,
;     0b01000100,
;     0b01000000,
;     0b01111000,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b00111000},
;    {0b01111100,
;     0b00000100,
;     0b00000100,
;     0b00001000,
;     0b00010000,
;     0b00100000,
;     0b00100000,
;     0b00100000},
;    {0b00111000,
;     0b01000100,
;     0b01000100,
;     0b00111000,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b00111000},
;    {0b00111000,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b00111100,
;     0b00000100,
;     0b01000100,
;     0b00111000},
;    {0b00111000,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b01000100,
;     0b00111000}};

	.DSEG
;
;const int IMAGES_LEN = sizeof(IMAGES) / 8;
;
;// Initialize pins as outputs
;void MAX7219_Init(void)
; 0000 006A {

	.CSEG
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 006B       // Configure pins as outputs
; 0000 006C       DDRB .5 = 1; // DIN
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006D       DDRB .4 = 1; // CS
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006E       DDRB .3 = 1; // CLK
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 006F 
; 0000 0070       // Default pin states
; 0000 0071       MAX7219_CS = 1;  // CS high
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0072       MAX7219_CLK = 0; // CLK low
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0073       MAX7219_DIN = 0; // DIN low
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0074 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;// Send data to MAX7219
;void MAX7219_Send(unsigned char address, unsigned char data)
; 0000 0078 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0079       unsigned char i;
; 0000 007A 
; 0000 007B       MAX7219_CS = 0; // Select device
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;	address -> Y+2
;	data -> Y+1
;	i -> R17
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 007C 
; 0000 007D       // Send address byte
; 0000 007E       for (i = 0; i < 8; i++)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 007F       {
; 0000 0080             MAX7219_CLK = 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0081             MAX7219_DIN = (address & 0x80) ? 1 : 0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0082             MAX7219_CLK = 1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0083             address <<= 1;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0084       }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0085 
; 0000 0086       // Send data byte
; 0000 0087       for (i = 0; i < 8; i++)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0088       {
; 0000 0089             MAX7219_CLK = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008A             MAX7219_DIN = (data & 0x80) ? 1 : 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008B             MAX7219_CLK = 1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 008C             data <<= 1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008D       }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008E 
; 0000 008F       MAX7219_CS = 1; // Deselect device
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0090 }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;// Configure MAX7219
;void MAX7219_Configure(void)
; 0000 0094 {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0095       unsigned char i;
; 0000 0096 
; 0000 0097       // Disable BCD decoding
; 0000 0098       MAX7219_Send(DECODE_MODE, 0x00);
;PCODE: $00000087 VOL: 0
;	i -> R17
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0099 
; 0000 009A       // Set medium intensity (8/32)
; 0000 009B       MAX7219_Send(INTENSITY, 0x03);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 009C 
; 0000 009D       // Scan all digits (0-7)
; 0000 009E       MAX7219_Send(SCAN_LIMIT, 0x07);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 009F 
; 0000 00A0       // Normal operation mode
; 0000 00A1       MAX7219_Send(SHUTDOWN, 0x01);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A2 
; 0000 00A3       // Disable display test
; 0000 00A4       MAX7219_Send(DISPLAY_TEST, 0x00);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A5 
; 0000 00A6       // Clear all digits
; 0000 00A7       for (i = 1; i <= 8; i++)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A8       {
; 0000 00A9             MAX7219_Send(i, 0x00);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AA       }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00AB }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;
;// Set a single LED in the matrix
;void MAX7219_SetLED(unsigned char row, unsigned char col, unsigned char state)
; 0000 00AF {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B0       unsigned char current_row;
; 0000 00B1 
; 0000 00B2       // Read current row data
; 0000 00B3       MAX7219_Send(row + 1, state ? (1 << col) : 0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;	row -> Y+3
;	col -> Y+2
;	state -> Y+1
;	current_row -> R17
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B4 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;
;// Display a pattern on the matrix
;void MAX7219_DisplayPattern(unsigned char pattern[8])
; 0000 00B8 {
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B9       unsigned char i;
; 0000 00BA 
; 0000 00BB       for (i = 0; i < 8; i++)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;	pattern -> Y+1
;	i -> R17
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00BC       {
; 0000 00BD             MAX7219_Send(i + 1, pattern[i]);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00BE       }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00BF }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;void MAX7219_Clear(void)
; 0000 00C2 {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00C3       unsigned char i;
; 0000 00C4       for (i = 1; i <= 8; i++)
;PCODE: $000000E9 VOL: 0
;	i -> R17
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00C5       {
; 0000 00C6             MAX7219_Send(i, 0x00);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C7       }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C8 }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;
;void main(void)
; 0000 00CB {
;PCODE: $000000FE VOL: 0
; 0000 00CC       unsigned char i;
; 0000 00CD       // Initialize MAX7219
; 0000 00CE       MAX7219_Init();
;	i -> R17
;PCODE: $000000FF VOL: 0
; 0000 00CF       MAX7219_Configure();
;PCODE: $00000100 VOL: 0
; 0000 00D0       MAX7219_Clear();
;PCODE: $00000101 VOL: 0
; 0000 00D1 
; 0000 00D2       while (1)
;PCODE: $00000102 VOL: 0
; 0000 00D3       {
; 0000 00D4 
; 0000 00D5             for (i = 0; i < IMAGES_LEN; i++)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D6             {
; 0000 00D7                   // Display smiley face
; 0000 00D8                   MAX7219_DisplayPattern(IMAGES[i]);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00D9 
; 0000 00DA                   delay_ms(500); // Show for 1 second
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00DB 
; 0000 00DC                   // Clear display
; 0000 00DD                   MAX7219_Clear();
;PCODE: $00000115 VOL: 0
; 0000 00DE                   delay_ms(100); // Off for 0.5 second
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00DF             }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00E0       }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00E1 }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
