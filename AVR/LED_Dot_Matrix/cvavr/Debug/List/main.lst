
AVRASM ver. 2.1.30  C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\LED_Dot_Matrix\cvavr\Debug\List\main.asm Tue Dec 31 16:00:19 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0068 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 3010
000034 1010
000035 1010
000036 3810      	.DB  0x10,0x30,0x10,0x10,0x10,0x10,0x10,0x38
000037 4438
000038 0404
000039 1008
00003a 7c20      	.DB  0x38,0x44,0x4,0x4,0x8,0x10,0x20,0x7C
00003b 4438
00003c 1804
00003d 0404
00003e 3844      	.DB  0x38,0x44,0x4,0x18,0x4,0x4,0x44,0x38
00003f 0c04
000040 2414
000041 7c44
000042 0404      	.DB  0x4,0xC,0x14,0x24,0x44,0x7C,0x4,0x4
000043 407c
000044 7840
000045 0404
000046 3844      	.DB  0x7C,0x40,0x40,0x78,0x4,0x4,0x44,0x38
000047 4438
000048 7840
000049 4444
00004a 3844      	.DB  0x38,0x44,0x40,0x78,0x44,0x44,0x44,0x38
00004b 047c
00004c 0804
00004d 2010
00004e 2020      	.DB  0x7C,0x4,0x4,0x8,0x10,0x20,0x20,0x20
00004f 4438
000050 3844
000051 4444
000052 3844      	.DB  0x38,0x44,0x44,0x38,0x44,0x44,0x44,0x38
000053 4438
000054 4444
000055 043c
000056 3844      	.DB  0x38,0x44,0x44,0x44,0x3C,0x4,0x44,0x38
000057 4438
000058 4444
000059 4444
00005a 3844      	.DB  0x38,0x44,0x44,0x44,0x44,0x44,0x44,0x38
                 _0x2020060:
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\LED_Dot_Matrix\cvavr\Debug\List\main.asm(1134): warning: .cseg .db misalignment - padding zero byte
00005b 0001      	.DB  0x1
                 _0x2020000:
00005c 4e2d
00005d 4e41
00005e 4900
00005f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Behnam\Documents\Fork Projects\Electronic-Projects\AVR\LED_Dot_Matrix\cvavr\Debug\List\main.asm(1137): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000061 0050      	.DW  0x50
000062 0160      	.DW  _IMAGES
000063 0066      	.DW  _0x3*2
                 
000064 0001      	.DW  0x01
000065 01b0      	.DW  __seed_G101
000066 00b6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000067 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000068 94f8      	CLI
000069 27ee      	CLR  R30
00006a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006b e0f1      	LDI  R31,1
00006c bffb      	OUT  GICR,R31
00006d bfeb      	OUT  GICR,R30
00006e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006f e08d      	LDI  R24,(14-2)+1
000070 e0a2      	LDI  R26,2
000071 27bb      	CLR  R27
                 __CLEAR_REG:
000072 93ed      	ST   X+,R30
000073 958a      	DEC  R24
000074 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000075 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000076 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000077 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000078 93ed      	ST   X+,R30
000079 9701      	SBIW R24,1
00007a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007b ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007d 9185      	LPM  R24,Z+
00007e 9195      	LPM  R25,Z+
00007f 9700      	SBIW R24,0
000080 f061      	BREQ __GLOBAL_INI_END
000081 91a5      	LPM  R26,Z+
000082 91b5      	LPM  R27,Z+
000083 9005      	LPM  R0,Z+
000084 9015      	LPM  R1,Z+
000085 01bf      	MOVW R22,R30
000086 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000087 9005      	LPM  R0,Z+
000088 920d      	ST   X+,R0
000089 9701      	SBIW R24,1
00008a f7e1      	BRNE __GLOBAL_INI_LOOP
00008b 01fb      	MOVW R30,R22
00008c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008e bfed      	OUT  SPL,R30
00008f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000090 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000091 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000092 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000093 940c 0109 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;
                 ;// Define pins for MAX7219
                 ;#define MAX7219_DIN PORTB .5 // Data in
                 ;#define MAX7219_CS PORTB .4  // Chip select
                 ;#define MAX7219_CLK PORTB .3 // Clock
                 ;
                 ;// MAX7219 registers
                 ;#define DECODE_MODE 0x09
                 ;#define INTENSITY 0x0A
                 ;#define SCAN_LIMIT 0x0B
                 ;#define SHUTDOWN 0x0C
                 ;#define DISPLAY_TEST 0x0F
                 ;
                 ;// Example smiley face pattern
                 ;unsigned char IMAGES[][8] = {
                 ;    {0b00010000,
                 ;     0b00110000,
                 ;     0b00010000,
                 ;     0b00010000,
                 ;     0b00010000,
                 ;     0b00010000,
                 ;     0b00010000,
                 ;     0b00111000},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b00000100,
                 ;     0b00000100,
                 ;     0b00001000,
                 ;     0b00010000,
                 ;     0b00100000,
                 ;     0b01111100},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b00000100,
                 ;     0b00011000,
                 ;     0b00000100,
                 ;     0b00000100,
                 ;     0b01000100,
                 ;     0b00111000},
                 ;    {0b00000100,
                 ;     0b00001100,
                 ;     0b00010100,
                 ;     0b00100100,
                 ;     0b01000100,
                 ;     0b01111100,
                 ;     0b00000100,
                 ;     0b00000100},
                 ;    {0b01111100,
                 ;     0b01000000,
                 ;     0b01000000,
                 ;     0b01111000,
                 ;     0b00000100,
                 ;     0b00000100,
                 ;     0b01000100,
                 ;     0b00111000},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b01000000,
                 ;     0b01111000,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b00111000},
                 ;    {0b01111100,
                 ;     0b00000100,
                 ;     0b00000100,
                 ;     0b00001000,
                 ;     0b00010000,
                 ;     0b00100000,
                 ;     0b00100000,
                 ;     0b00100000},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b00111000,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b00111000},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b00111100,
                 ;     0b00000100,
                 ;     0b01000100,
                 ;     0b00111000},
                 ;    {0b00111000,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b01000100,
                 ;     0b00111000}};
                 
                 	.DSEG
                 ;
                 ;const int IMAGES_LEN = sizeof(IMAGES) / 8;
                 ;
                 ;// Initialize pins as outputs
                 ;void MAX7219_Init(void)
                 ; 0000 006A {
                 
                 	.CSEG
                 _MAX7219_Init:
                 ; .FSTART _MAX7219_Init
                 ; 0000 006B       // Configure pins as outputs
                 ; 0000 006C       DDRB .5 = 1; // DIN
000095 9abd      	SBI  0x17,5
                 ; 0000 006D       DDRB .4 = 1; // CS
000096 9abc      	SBI  0x17,4
                 ; 0000 006E       DDRB .3 = 1; // CLK
000097 9abb      	SBI  0x17,3
                 ; 0000 006F 
                 ; 0000 0070       // Default pin states
                 ; 0000 0071       MAX7219_CS = 1;  // CS high
000098 9ac4      	SBI  0x18,4
                 ; 0000 0072       MAX7219_CLK = 0; // CLK low
000099 98c3      	CBI  0x18,3
                 ; 0000 0073       MAX7219_DIN = 0; // DIN low
00009a 98c5      	CBI  0x18,5
                 ; 0000 0074 }
00009b 9508      	RET
                 ; .FEND
                 ;
                 ;// Send data to MAX7219
                 ;void MAX7219_Send(unsigned char address, unsigned char data)
                 ; 0000 0078 {
                 _MAX7219_Send:
                 ; .FSTART _MAX7219_Send
                 ; 0000 0079       unsigned char i;
                 ; 0000 007A 
                 ; 0000 007B       MAX7219_CS = 0; // Select device
00009c 93aa      	ST   -Y,R26
00009d 931a      	ST   -Y,R17
                 ;	address -> Y+2
                 ;	data -> Y+1
                 ;	i -> R17
00009e 98c4      	CBI  0x18,4
                 ; 0000 007C 
                 ; 0000 007D       // Send address byte
                 ; 0000 007E       for (i = 0; i < 8; i++)
00009f e010      	LDI  R17,LOW(0)
                 _0x13:
0000a0 3018      	CPI  R17,8
0000a1 f490      	BRSH _0x14
                 ; 0000 007F       {
                 ; 0000 0080             MAX7219_CLK = 0;
0000a2 98c3      	CBI  0x18,3
                 ; 0000 0081             MAX7219_DIN = (address & 0x80) ? 1 : 0;
0000a3 81ea      	LDD  R30,Y+2
0000a4 78e0      	ANDI R30,LOW(0x80)
0000a5 f011      	BREQ _0x17
0000a6 e0e1      	LDI  R30,LOW(1)
0000a7 c001      	RJMP _0x18
                 _0x17:
0000a8 e0e0      	LDI  R30,LOW(0)
                 _0x18:
0000a9 30e0      	CPI  R30,0
0000aa f411      	BRNE _0x1A
0000ab 98c5      	CBI  0x18,5
0000ac c001      	RJMP _0x1B
                 _0x1A:
0000ad 9ac5      	SBI  0x18,5
                 _0x1B:
                 ; 0000 0082             MAX7219_CLK = 1;
0000ae 9ac3      	SBI  0x18,3
                 ; 0000 0083             address <<= 1;
0000af 81ea      	LDD  R30,Y+2
0000b0 0fee      	LSL  R30
0000b1 83ea      	STD  Y+2,R30
                 ; 0000 0084       }
0000b2 5f1f      	SUBI R17,-1
0000b3 cfec      	RJMP _0x13
                 _0x14:
                 ; 0000 0085 
                 ; 0000 0086       // Send data byte
                 ; 0000 0087       for (i = 0; i < 8; i++)
0000b4 e010      	LDI  R17,LOW(0)
                 _0x1F:
0000b5 3018      	CPI  R17,8
0000b6 f490      	BRSH _0x20
                 ; 0000 0088       {
                 ; 0000 0089             MAX7219_CLK = 0;
0000b7 98c3      	CBI  0x18,3
                 ; 0000 008A             MAX7219_DIN = (data & 0x80) ? 1 : 0;
0000b8 81e9      	LDD  R30,Y+1
0000b9 78e0      	ANDI R30,LOW(0x80)
0000ba f011      	BREQ _0x23
0000bb e0e1      	LDI  R30,LOW(1)
0000bc c001      	RJMP _0x24
                 _0x23:
0000bd e0e0      	LDI  R30,LOW(0)
                 _0x24:
0000be 30e0      	CPI  R30,0
0000bf f411      	BRNE _0x26
0000c0 98c5      	CBI  0x18,5
0000c1 c001      	RJMP _0x27
                 _0x26:
0000c2 9ac5      	SBI  0x18,5
                 _0x27:
                 ; 0000 008B             MAX7219_CLK = 1;
0000c3 9ac3      	SBI  0x18,3
                 ; 0000 008C             data <<= 1;
0000c4 81e9      	LDD  R30,Y+1
0000c5 0fee      	LSL  R30
0000c6 83e9      	STD  Y+1,R30
                 ; 0000 008D       }
0000c7 5f1f      	SUBI R17,-1
0000c8 cfec      	RJMP _0x1F
                 _0x20:
                 ; 0000 008E 
                 ; 0000 008F       MAX7219_CS = 1; // Deselect device
0000c9 9ac4      	SBI  0x18,4
                 ; 0000 0090 }
0000ca c030      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;// Configure MAX7219
                 ;void MAX7219_Configure(void)
                 ; 0000 0094 {
                 _MAX7219_Configure:
                 ; .FSTART _MAX7219_Configure
                 ; 0000 0095       unsigned char i;
                 ; 0000 0096 
                 ; 0000 0097       // Disable BCD decoding
                 ; 0000 0098       MAX7219_Send(DECODE_MODE, 0x00);
0000cb 931a      	ST   -Y,R17
                 ;	i -> R17
0000cc e0e9      	LDI  R30,LOW(9)
0000cd 93ea      	ST   -Y,R30
0000ce e0a0      	LDI  R26,LOW(0)
0000cf dfcc      	RCALL _MAX7219_Send
                 ; 0000 0099 
                 ; 0000 009A       // Set medium intensity (8/32)
                 ; 0000 009B       MAX7219_Send(INTENSITY, 0x03);
0000d0 e0ea      	LDI  R30,LOW(10)
0000d1 93ea      	ST   -Y,R30
0000d2 e0a3      	LDI  R26,LOW(3)
0000d3 dfc8      	RCALL _MAX7219_Send
                 ; 0000 009C 
                 ; 0000 009D       // Scan all digits (0-7)
                 ; 0000 009E       MAX7219_Send(SCAN_LIMIT, 0x07);
0000d4 e0eb      	LDI  R30,LOW(11)
0000d5 93ea      	ST   -Y,R30
0000d6 e0a7      	LDI  R26,LOW(7)
0000d7 dfc4      	RCALL _MAX7219_Send
                 ; 0000 009F 
                 ; 0000 00A0       // Normal operation mode
                 ; 0000 00A1       MAX7219_Send(SHUTDOWN, 0x01);
0000d8 e0ec      	LDI  R30,LOW(12)
0000d9 93ea      	ST   -Y,R30
0000da e0a1      	LDI  R26,LOW(1)
0000db dfc0      	RCALL _MAX7219_Send
                 ; 0000 00A2 
                 ; 0000 00A3       // Disable display test
                 ; 0000 00A4       MAX7219_Send(DISPLAY_TEST, 0x00);
0000dc e0ef      	LDI  R30,LOW(15)
0000dd 93ea      	ST   -Y,R30
0000de e0a0      	LDI  R26,LOW(0)
0000df dfbc      	RCALL _MAX7219_Send
                 ; 0000 00A5 
                 ; 0000 00A6       // Clear all digits
                 ; 0000 00A7       for (i = 1; i <= 8; i++)
0000e0 e011      	LDI  R17,LOW(1)
                 _0x2D:
0000e1 3019      	CPI  R17,9
0000e2 f428      	BRSH _0x2E
                 ; 0000 00A8       {
                 ; 0000 00A9             MAX7219_Send(i, 0x00);
0000e3 931a      	ST   -Y,R17
0000e4 e0a0      	LDI  R26,LOW(0)
0000e5 dfb6      	RCALL _MAX7219_Send
                 ; 0000 00AA       }
0000e6 5f1f      	SUBI R17,-1
0000e7 cff9      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00AB }
0000e8 c01e      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;// Set a single LED in the matrix
                 ;void MAX7219_SetLED(unsigned char row, unsigned char col, unsigned char state)
                 ; 0000 00AF {
                 ; 0000 00B0       unsigned char current_row;
                 ; 0000 00B1 
                 ; 0000 00B2       // Read current row data
                 ; 0000 00B3       MAX7219_Send(row + 1, state ? (1 << col) : 0);
                 ;	row -> Y+3
                 ;	col -> Y+2
                 ;	state -> Y+1
                 ;	current_row -> R17
                 ; 0000 00B4 }
                 ;
                 ;// Display a pattern on the matrix
                 ;void MAX7219_DisplayPattern(unsigned char pattern[8])
                 ; 0000 00B8 {
                 _MAX7219_DisplayPattern:
                 ; .FSTART _MAX7219_DisplayPattern
                 ; 0000 00B9       unsigned char i;
                 ; 0000 00BA 
                 ; 0000 00BB       for (i = 0; i < 8; i++)
0000e9 93ba      	ST   -Y,R27
0000ea 93aa      	ST   -Y,R26
0000eb 931a      	ST   -Y,R17
                 ;	pattern -> Y+1
                 ;	i -> R17
0000ec e010      	LDI  R17,LOW(0)
                 _0x33:
0000ed 3018      	CPI  R17,8
0000ee f460      	BRSH _0x34
                 ; 0000 00BC       {
                 ; 0000 00BD             MAX7219_Send(i + 1, pattern[i]);
0000ef 2fe1      	MOV  R30,R17
0000f0 5fef      	SUBI R30,-LOW(1)
0000f1 93ea      	ST   -Y,R30
0000f2 81aa      	LDD  R26,Y+2
0000f3 81bb      	LDD  R27,Y+2+1
0000f4 27ee      	CLR  R30
0000f5 0fa1      	ADD  R26,R17
0000f6 1fbe      	ADC  R27,R30
0000f7 91ac      	LD   R26,X
0000f8 dfa3      	RCALL _MAX7219_Send
                 ; 0000 00BE       }
0000f9 5f1f      	SUBI R17,-1
0000fa cff2      	RJMP _0x33
                 _0x34:
                 ; 0000 00BF }
                 _0x20A0002:
0000fb 8118      	LDD  R17,Y+0
0000fc 9623      	ADIW R28,3
0000fd 9508      	RET
                 ; .FEND
                 ;
                 ;void MAX7219_Clear(void)
                 ; 0000 00C2 {
                 _MAX7219_Clear:
                 ; .FSTART _MAX7219_Clear
                 ; 0000 00C3       unsigned char i;
                 ; 0000 00C4       for (i = 1; i <= 8; i++)
0000fe 931a      	ST   -Y,R17
                 ;	i -> R17
0000ff e011      	LDI  R17,LOW(1)
                 _0x36:
000100 3019      	CPI  R17,9
000101 f428      	BRSH _0x37
                 ; 0000 00C5       {
                 ; 0000 00C6             MAX7219_Send(i, 0x00);
000102 931a      	ST   -Y,R17
000103 e0a0      	LDI  R26,LOW(0)
000104 df97      	RCALL _MAX7219_Send
                 ; 0000 00C7       }
000105 5f1f      	SUBI R17,-1
000106 cff9      	RJMP _0x36
                 _0x37:
                 ; 0000 00C8 }
                 _0x20A0001:
000107 9119      	LD   R17,Y+
000108 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00CB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00CC       unsigned char i;
                 ; 0000 00CD       // Initialize MAX7219
                 ; 0000 00CE       MAX7219_Init();
                 ;	i -> R17
000109 df8b      	RCALL _MAX7219_Init
                 ; 0000 00CF       MAX7219_Configure();
00010a dfc0      	RCALL _MAX7219_Configure
                 ; 0000 00D0       MAX7219_Clear();
00010b dff2      	RCALL _MAX7219_Clear
                 ; 0000 00D1 
                 ; 0000 00D2       while (1)
                 _0x38:
                 ; 0000 00D3       {
                 ; 0000 00D4 
                 ; 0000 00D5             for (i = 0; i < IMAGES_LEN; i++)
00010c e010      	LDI  R17,LOW(0)
                 _0x3C:
00010d 2fa1      	MOV  R26,R17
00010e 27bb      	CLR  R27
00010f 971a      	SBIW R26,10
000110 f49c      	BRGE _0x3D
                 ; 0000 00D6             {
                 ; 0000 00D7                   // Display smiley face
                 ; 0000 00D8                   MAX7219_DisplayPattern(IMAGES[i]);
000111 2fe1      	MOV  R30,R17
000112 e0f0      	LDI  R31,0
000113 940e 0130 	CALL __LSLW3
000115 5ae0      	SUBI R30,LOW(-_IMAGES)
000116 4ffe      	SBCI R31,HIGH(-_IMAGES)
000117 01df      	MOVW R26,R30
000118 dfd0      	RCALL _MAX7219_DisplayPattern
                 ; 0000 00D9 
                 ; 0000 00DA                   delay_ms(500); // Show for 1 second
000119 efa4      	LDI  R26,LOW(500)
00011a e0b1      	LDI  R27,HIGH(500)
00011b 940e 0126 	CALL _delay_ms
                 ; 0000 00DB 
                 ; 0000 00DC                   // Clear display
                 ; 0000 00DD                   MAX7219_Clear();
00011d dfe0      	RCALL _MAX7219_Clear
                 ; 0000 00DE                   delay_ms(100); // Off for 0.5 second
00011e e6a4      	LDI  R26,LOW(100)
00011f e0b0      	LDI  R27,0
000120 940e 0126 	CALL _delay_ms
                 ; 0000 00DF             }
000122 5f1f      	SUBI R17,-1
000123 cfe9      	RJMP _0x3C
                 _0x3D:
                 ; 0000 00E0       }
000124 cfe7      	RJMP _0x38
                 ; 0000 00E1 }
                 _0x3E:
000125 cfff      	RJMP _0x3E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _IMAGES:
000160           	.BYTE 0x50
                 __seed_G101:
0001b0           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000126 9610      	adiw r26,0
000127 f039      	breq __delay_ms1
                 __delay_ms0:
000128 95a8      	wdr
                +
000129 ee88     +LDI R24 , LOW ( 0x3E8 )
00012a e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00012b 9701     +SBIW R24 , 1
00012c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00012d 9711      	sbiw r26,1
00012e f7c9      	brne __delay_ms0
                 __delay_ms1:
00012f 9508      	ret
                 
                 __LSLW3:
000130 0fee      	LSL  R30
000131 1fff      	ROL  R31
                 __LSLW2:
000132 0fee      	LSL  R30
000133 1fff      	ROL  R31
000134 0fee      	LSL  R30
000135 1fff      	ROL  R31
000136 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  29 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  22 r27:   8 r28:   2 r29:   1 r30:  51 r31:   8 
x  :   4 y  :  25 z  :   7 
Registers used: 15 out of 35 (42.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :   2 ldd   :   7 ldi   :  41 
lds   :   0 lpm   :   7 lsl   :   5 lsr   :   0 mov   :   3 movw  :   4 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   6 pop   :   0 push  :   0 rcall :  13 ret   :   5 
reti  :   0 rjmp  :  15 rol   :   3 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   2 sts   :   0 sub   :   0 subi  :   8 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 34 out of 116 (29.3%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00026e    498    124    622   16384   3.8%
[.dseg] 0x000060 0x0001b4      0     84     84    1024   8.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
